<div class="modal fade show d-block bg-modal" id="exampleModal" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel">Update customer</h5>
            </div>
            <EditForm Model="CustomerToUpdate" OnValidSubmit="UpdateCustomerAsync">
                <div class="modal-body">
                    <form style="max-width:500px; margin:auto">
                        <label for="firstName" class="sr-only"></label>
                        <InputText @bind-Value="CustomerToUpdate.FirstName" class="form-control" placeholder="First name" required autofocus />
                        <label for="lastName" class="sr-only"></label>
                        <InputText @bind-Value="CustomerToUpdate.LastName" class="form-control" placeholder="Last name" required autofocus />
                        <label for="email" class="sr-only"></label>
                        <InputText @bind-Value="CustomerToUpdate.Email" class="form-control" placeholder="e-mail" required autofocus />
                        <label for="phone" class="sr-only"></label>
                        <InputText @bind-Value="CustomerToUpdate.Phone" class="form-control" placeholder="phone number" required autofocus />
                    </form>
                    <DataAnnotationsValidator />
                    <ValidationSummary />
                </div>
                <div class="modal-footer">
                    <button @onclick="() => ButtonClose.InvokeAsync(CustomerToUpdate)" type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                    <button type="submit" class="btn btn-primary">Save changes</button>
                </div>
            </EditForm>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public EventCallback<Customer?> ButtonClose { get; set; }

    [Parameter]
    public Customer? CustomerToUpdate { get; set; } = null;

    [Inject]
    protected HttpClient httpClient { get; set; }

    private async Task UpdateCustomerAsync()
    {

        HttpResponseMessage response = await httpClient.PutAsJsonAsync<Customer>(APIEndpoints.CustomersUpdate(CustomerToUpdate.Id), CustomerToUpdate);

        if (response.IsSuccessStatusCode)
        {

            await ButtonClose.InvokeAsync(CustomerToUpdate);

        }
    }
}
